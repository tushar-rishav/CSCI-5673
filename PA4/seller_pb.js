/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.seller.Item', null, global);
goog.exportSymbol('proto.seller.ItemQtyPair', null, global);
goog.exportSymbol('proto.seller.authenticateResponse', null, global);
goog.exportSymbol('proto.seller.changeSalePriceRequest', null, global);
goog.exportSymbol('proto.seller.changeSalePriceResponse', null, global);
goog.exportSymbol('proto.seller.displayItemResponse', null, global);
goog.exportSymbol('proto.seller.displayItemsRequest', null, global);
goog.exportSymbol('proto.seller.itemList', null, global);
goog.exportSymbol('proto.seller.putAnItemForSaleRequest', null, global);
goog.exportSymbol('proto.seller.putAnItemForSaleResponse', null, global);
goog.exportSymbol('proto.seller.rating', null, global);
goog.exportSymbol('proto.seller.registerResponse', null, global);
goog.exportSymbol('proto.seller.rmvAnItemRequest', null, global);
goog.exportSymbol('proto.seller.rmvAnItemResponse', null, global);
goog.exportSymbol('proto.seller.userName', null, global);
goog.exportSymbol('proto.seller.userRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.registerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.registerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.registerResponse.displayName = 'proto.seller.registerResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.registerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.registerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.registerResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.registerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    res: msg.getRes()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.registerResponse}
 */
proto.seller.registerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.registerResponse;
  return proto.seller.registerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.registerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.registerResponse}
 */
proto.seller.registerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.registerResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.registerResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.registerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.registerResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRes();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.registerResponse} The clone.
 */
proto.seller.registerResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.registerResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string res = 1;
 * @return {string}
 */
proto.seller.registerResponse.prototype.getRes = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.registerResponse.prototype.setRes = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.authenticateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.authenticateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.authenticateResponse.displayName = 'proto.seller.authenticateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.authenticateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.authenticateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.authenticateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.authenticateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    res: msg.getRes()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.authenticateResponse}
 */
proto.seller.authenticateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.authenticateResponse;
  return proto.seller.authenticateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.authenticateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.authenticateResponse}
 */
proto.seller.authenticateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.authenticateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.authenticateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.authenticateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.authenticateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRes();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.authenticateResponse} The clone.
 */
proto.seller.authenticateResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.authenticateResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string res = 1;
 * @return {string}
 */
proto.seller.authenticateResponse.prototype.getRes = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.authenticateResponse.prototype.setRes = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.userName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.userName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.userName.displayName = 'proto.seller.userName';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.userName.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.userName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.userName} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.userName.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.userName}
 */
proto.seller.userName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.userName;
  return proto.seller.userName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.userName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.userName}
 */
proto.seller.userName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.userName} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.userName.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.userName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.userName.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.userName} The clone.
 */
proto.seller.userName.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.userName} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.seller.userName.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.userName.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.rating = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.rating, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.rating.displayName = 'proto.seller.rating';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.rating.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.rating.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.rating} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.rating.toObject = function(includeInstance, msg) {
  var f, obj = {
    val: msg.getVal()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.rating}
 */
proto.seller.rating.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.rating;
  return proto.seller.rating.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.rating} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.rating}
 */
proto.seller.rating.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.rating} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.rating.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.rating.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.rating.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVal();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.rating} The clone.
 */
proto.seller.rating.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.rating} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 val = 1;
 * @return {number}
 */
proto.seller.rating.prototype.getVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.seller.rating.prototype.setVal = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.userRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.userRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.userRequest.displayName = 'proto.seller.userRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.userRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.userRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.userRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.userRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername(),
    password: msg.getPassword()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.userRequest}
 */
proto.seller.userRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.userRequest;
  return proto.seller.userRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.userRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.userRequest}
 */
proto.seller.userRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.userRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.userRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.userRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.userRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.userRequest} The clone.
 */
proto.seller.userRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.userRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.seller.userRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.userRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.seller.userRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.seller.userRequest.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seller.Item.repeatedFields_, null);
};
goog.inherits(proto.seller.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.Item.displayName = 'proto.seller.Item';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seller.Item.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.Item} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    catergory: msg.getCatergory(),
    keywordlistList: jspb.Message.getField(msg, 3),
    condition: msg.getCondition(),
    price: msg.getPrice(),
    qty: msg.getQty()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.Item}
 */
proto.seller.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.Item;
  return proto.seller.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.Item}
 */
proto.seller.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCatergory(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getKeywordlistList().push(value);
      msg.setKeywordlistList(msg.getKeywordlistList());
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondition(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.Item} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.Item.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.Item.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCatergory();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getKeywordlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = this.getCondition();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPrice();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getQty();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.Item} The clone.
 */
proto.seller.Item.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.Item} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.seller.Item.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.Item.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 catergory = 2;
 * @return {number}
 */
proto.seller.Item.prototype.getCatergory = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.seller.Item.prototype.setCatergory = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string keywordList = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.seller.Item.prototype.getKeywordlistList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.seller.Item.prototype.setKeywordlistList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.seller.Item.prototype.clearKeywordlistList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * optional string condition = 4;
 * @return {string}
 */
proto.seller.Item.prototype.getCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.seller.Item.prototype.setCondition = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 price = 5;
 * @return {number}
 */
proto.seller.Item.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.seller.Item.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 qty = 6;
 * @return {number}
 */
proto.seller.Item.prototype.getQty = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.seller.Item.prototype.setQty = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.putAnItemForSaleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.putAnItemForSaleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.putAnItemForSaleRequest.displayName = 'proto.seller.putAnItemForSaleRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.putAnItemForSaleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.putAnItemForSaleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.putAnItemForSaleRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.putAnItemForSaleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername(),
    itemId: msg.getItemId(),
    qty: msg.getQty()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.putAnItemForSaleRequest}
 */
proto.seller.putAnItemForSaleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.putAnItemForSaleRequest;
  return proto.seller.putAnItemForSaleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.putAnItemForSaleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.putAnItemForSaleRequest}
 */
proto.seller.putAnItemForSaleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.putAnItemForSaleRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.putAnItemForSaleRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.putAnItemForSaleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.putAnItemForSaleRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getItemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getQty();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.putAnItemForSaleRequest} The clone.
 */
proto.seller.putAnItemForSaleRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.putAnItemForSaleRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.seller.putAnItemForSaleRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.putAnItemForSaleRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string item_id = 2;
 * @return {string}
 */
proto.seller.putAnItemForSaleRequest.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.seller.putAnItemForSaleRequest.prototype.setItemId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 qty = 3;
 * @return {number}
 */
proto.seller.putAnItemForSaleRequest.prototype.getQty = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.seller.putAnItemForSaleRequest.prototype.setQty = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.putAnItemForSaleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.putAnItemForSaleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.putAnItemForSaleResponse.displayName = 'proto.seller.putAnItemForSaleResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.putAnItemForSaleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.putAnItemForSaleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.putAnItemForSaleResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.putAnItemForSaleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    res: msg.getRes()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.putAnItemForSaleResponse}
 */
proto.seller.putAnItemForSaleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.putAnItemForSaleResponse;
  return proto.seller.putAnItemForSaleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.putAnItemForSaleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.putAnItemForSaleResponse}
 */
proto.seller.putAnItemForSaleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.putAnItemForSaleResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.putAnItemForSaleResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.putAnItemForSaleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.putAnItemForSaleResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRes();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.putAnItemForSaleResponse} The clone.
 */
proto.seller.putAnItemForSaleResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.putAnItemForSaleResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string res = 1;
 * @return {string}
 */
proto.seller.putAnItemForSaleResponse.prototype.getRes = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.putAnItemForSaleResponse.prototype.setRes = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.changeSalePriceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.changeSalePriceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.changeSalePriceRequest.displayName = 'proto.seller.changeSalePriceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.changeSalePriceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.changeSalePriceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.changeSalePriceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.changeSalePriceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemid: msg.getItemid(),
    price: msg.getPrice()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.changeSalePriceRequest}
 */
proto.seller.changeSalePriceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.changeSalePriceRequest;
  return proto.seller.changeSalePriceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.changeSalePriceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.changeSalePriceRequest}
 */
proto.seller.changeSalePriceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.changeSalePriceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.changeSalePriceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.changeSalePriceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.changeSalePriceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getItemid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPrice();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.changeSalePriceRequest} The clone.
 */
proto.seller.changeSalePriceRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.changeSalePriceRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string itemId = 1;
 * @return {string}
 */
proto.seller.changeSalePriceRequest.prototype.getItemid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.changeSalePriceRequest.prototype.setItemid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 price = 2;
 * @return {number}
 */
proto.seller.changeSalePriceRequest.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.seller.changeSalePriceRequest.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.changeSalePriceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.changeSalePriceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.changeSalePriceResponse.displayName = 'proto.seller.changeSalePriceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.changeSalePriceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.changeSalePriceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.changeSalePriceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.changeSalePriceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    res: msg.getRes()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.changeSalePriceResponse}
 */
proto.seller.changeSalePriceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.changeSalePriceResponse;
  return proto.seller.changeSalePriceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.changeSalePriceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.changeSalePriceResponse}
 */
proto.seller.changeSalePriceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.changeSalePriceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.changeSalePriceResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.changeSalePriceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.changeSalePriceResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRes();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.changeSalePriceResponse} The clone.
 */
proto.seller.changeSalePriceResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.changeSalePriceResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string res = 1;
 * @return {string}
 */
proto.seller.changeSalePriceResponse.prototype.getRes = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.changeSalePriceResponse.prototype.setRes = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.rmvAnItemResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.rmvAnItemResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.rmvAnItemResponse.displayName = 'proto.seller.rmvAnItemResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.rmvAnItemResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.rmvAnItemResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.rmvAnItemResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.rmvAnItemResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    res: msg.getRes()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.rmvAnItemResponse}
 */
proto.seller.rmvAnItemResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.rmvAnItemResponse;
  return proto.seller.rmvAnItemResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.rmvAnItemResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.rmvAnItemResponse}
 */
proto.seller.rmvAnItemResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.rmvAnItemResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.rmvAnItemResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.rmvAnItemResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.rmvAnItemResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRes();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.rmvAnItemResponse} The clone.
 */
proto.seller.rmvAnItemResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.rmvAnItemResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string res = 1;
 * @return {string}
 */
proto.seller.rmvAnItemResponse.prototype.getRes = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.rmvAnItemResponse.prototype.setRes = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.rmvAnItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.rmvAnItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.rmvAnItemRequest.displayName = 'proto.seller.rmvAnItemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.rmvAnItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.rmvAnItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.rmvAnItemRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.rmvAnItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername(),
    itemid: msg.getItemid(),
    qty: msg.getQty()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.rmvAnItemRequest}
 */
proto.seller.rmvAnItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.rmvAnItemRequest;
  return proto.seller.rmvAnItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.rmvAnItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.rmvAnItemRequest}
 */
proto.seller.rmvAnItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.rmvAnItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.rmvAnItemRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.rmvAnItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.rmvAnItemRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getItemid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getQty();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.rmvAnItemRequest} The clone.
 */
proto.seller.rmvAnItemRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.rmvAnItemRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.seller.rmvAnItemRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.rmvAnItemRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string itemId = 2;
 * @return {string}
 */
proto.seller.rmvAnItemRequest.prototype.getItemid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.seller.rmvAnItemRequest.prototype.setItemid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 qty = 3;
 * @return {number}
 */
proto.seller.rmvAnItemRequest.prototype.getQty = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.seller.rmvAnItemRequest.prototype.setQty = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.ItemQtyPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.ItemQtyPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.ItemQtyPair.displayName = 'proto.seller.ItemQtyPair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.ItemQtyPair.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.ItemQtyPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.ItemQtyPair} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.ItemQtyPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && proto.seller.Item.toObject(includeInstance, f),
    qty: msg.getQty()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.ItemQtyPair}
 */
proto.seller.ItemQtyPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.ItemQtyPair;
  return proto.seller.ItemQtyPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.ItemQtyPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.ItemQtyPair}
 */
proto.seller.ItemQtyPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.seller.Item;
      reader.readMessage(value,proto.seller.Item.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.ItemQtyPair} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.ItemQtyPair.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.ItemQtyPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.ItemQtyPair.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.seller.Item.serializeBinaryToWriter
    );
  }
  f = this.getQty();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.ItemQtyPair} The clone.
 */
proto.seller.ItemQtyPair.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.ItemQtyPair} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Item item = 1;
 * @return {proto.seller.Item}
 */
proto.seller.ItemQtyPair.prototype.getItem = function() {
  return /** @type{proto.seller.Item} */ (
    jspb.Message.getWrapperField(this, proto.seller.Item, 1));
};


/** @param {proto.seller.Item|undefined} value  */
proto.seller.ItemQtyPair.prototype.setItem = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.seller.ItemQtyPair.prototype.clearItem = function() {
  this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.seller.ItemQtyPair.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 qty = 2;
 * @return {number}
 */
proto.seller.ItemQtyPair.prototype.getQty = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.seller.ItemQtyPair.prototype.setQty = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.itemList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seller.itemList.repeatedFields_, null);
};
goog.inherits(proto.seller.itemList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.itemList.displayName = 'proto.seller.itemList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seller.itemList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.itemList.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.itemList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.itemList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.itemList.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemlistsList: jspb.Message.toObjectList(msg.getItemlistsList(),
    proto.seller.ItemQtyPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.itemList}
 */
proto.seller.itemList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.itemList;
  return proto.seller.itemList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.itemList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.itemList}
 */
proto.seller.itemList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.seller.ItemQtyPair;
      reader.readMessage(value,proto.seller.ItemQtyPair.deserializeBinaryFromReader);
      msg.getItemlistsList().push(value);
      msg.setItemlistsList(msg.getItemlistsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.itemList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.itemList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.itemList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.itemList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getItemlistsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.seller.ItemQtyPair.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.itemList} The clone.
 */
proto.seller.itemList.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.itemList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ItemQtyPair itemLists = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.seller.ItemQtyPair>}
 */
proto.seller.itemList.prototype.getItemlistsList = function() {
  return /** @type{!Array.<!proto.seller.ItemQtyPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seller.ItemQtyPair, 1));
};


/** @param {Array.<!proto.seller.ItemQtyPair>} value  */
proto.seller.itemList.prototype.setItemlistsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.seller.itemList.prototype.clearItemlistsList = function() {
  this.setItemlistsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.displayItemsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.displayItemsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.displayItemsRequest.displayName = 'proto.seller.displayItemsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.displayItemsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.displayItemsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.displayItemsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.displayItemsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.displayItemsRequest}
 */
proto.seller.displayItemsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.displayItemsRequest;
  return proto.seller.displayItemsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.displayItemsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.displayItemsRequest}
 */
proto.seller.displayItemsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.displayItemsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.displayItemsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.displayItemsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.displayItemsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.displayItemsRequest} The clone.
 */
proto.seller.displayItemsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.displayItemsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.seller.displayItemsRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.seller.displayItemsRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.displayItemResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seller.displayItemResponse.repeatedFields_, null);
};
goog.inherits(proto.seller.displayItemResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.seller.displayItemResponse.displayName = 'proto.seller.displayItemResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seller.displayItemResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.displayItemResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.displayItemResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.displayItemResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.seller.displayItemResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemslistList: jspb.Message.toObjectList(msg.getItemslistList(),
    proto.seller.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.displayItemResponse}
 */
proto.seller.displayItemResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.displayItemResponse;
  return proto.seller.displayItemResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.displayItemResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.displayItemResponse}
 */
proto.seller.displayItemResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.seller.Item;
      reader.readMessage(value,proto.seller.Item.deserializeBinaryFromReader);
      msg.getItemslistList().push(value);
      msg.setItemslistList(msg.getItemslistList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.seller.displayItemResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.displayItemResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.displayItemResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.seller.displayItemResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getItemslistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.seller.Item.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.seller.displayItemResponse} The clone.
 */
proto.seller.displayItemResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.seller.displayItemResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Item itemsList = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.seller.Item>}
 */
proto.seller.displayItemResponse.prototype.getItemslistList = function() {
  return /** @type{!Array.<!proto.seller.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seller.Item, 1));
};


/** @param {Array.<!proto.seller.Item>} value  */
proto.seller.displayItemResponse.prototype.setItemslistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.seller.displayItemResponse.prototype.clearItemslistList = function() {
  this.setItemslistList([]);
};


goog.object.extend(exports, proto.seller);
